@model PrevNextInfoModel

@inject IWorkContext workContext;

@{
    var prevNextProductCssFilePath = "~/Plugins/SevenSpikes.Nop.Plugins.PrevNextProduct/Themes/" + Model.Theme + "/Content/prevnextproduct.css";
    
    var supportRtl = (await workContext.GetWorkingLanguageAsync()).Rtl;
}

<link rel="stylesheet" href="@prevNextProductCssFilePath" />

@if (supportRtl)
{
    var prevNextProductRtlCssFilePath = "~/Plugins/SevenSpikes.Nop.Plugins.PrevNextProduct/Themes/" + Model.Theme + "/Content/prevnextproduct.rtl.css";

    <link rel="stylesheet" href="@prevNextProductRtlCssFilePath" />
}

<div class="prev-next-wrapper">
    <div class="previous-product">
@if (!string.IsNullOrEmpty(Model.PrevProductSeName))
        {
            <a href="@(Url.RouteUrl<Product>(new { SeName = Model.PrevProductSeName }))"><span class="previous-product-label">@T("SevenSpikes.Plugins.PrevNextProduct.PrevButtonText")</span><span class="previous-product-title">@Model.PrevProductName</span></a>
        }
    </div>
    <div class="next-product">
@if (!string.IsNullOrEmpty(Model.NextProductSeName))
        {
            <a href="@(Url.RouteUrl<Product>(new { SeName = Model.NextProductSeName }))"><span class="next-product-label">@T("SevenSpikes.Plugins.PrevNextProduct.NextButtonText")</span><span class="next-product-title">@Model.NextProductName</span></a>
        }
    </div>
</div>